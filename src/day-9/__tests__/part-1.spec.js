import { Day9Solution } from "@/day-9/part-1";
import { beforeEach, describe, expect, test } from "@jest/globals";
import { Visualizer } from "@/day-9/visualizer";

describe("day 9", () => {
    let solver;
    let visualizer;

    describe("part 1", () => {
        beforeEach(() => {
            solver = new Day9Solution();
            visualizer = new Visualizer({ x: 4, y: 4 }, { x: 0, y: 1 });
        });

        test("track tail moves", () => {
            const input = `U 2`.replace(/\n +/g, "\n");
            expect(solver.move(input).map(m => visualizer.visualize(m))).toEqual([
                `....
                 ....
                 H...
                 ....`.replace(/ +/g, ""),
                `....
                 H...
                 T...
                 ....`.replace(/ +/g, ""),
                `H...
                 T...
                 s...
                 ....`.replace(/ +/g, ""),
            ]);
        });

        test("hide tail under head", () => {
            const input = `U 1
                           D 2
                           U 1`.replace(/\n +/g, "\n");
            expect(solver.move(input).map(m => visualizer.visualize(m))).toEqual([
                `....
                 ....
                 H...
                 ....`.replace(/ +/g, ""),
                `....
                 H...
                 T...
                 ....`.replace(/ +/g, ""),
                `....
                 ....
                 H...
                 ....`.replace(/ +/g, ""),
                `....
                 ....
                 T...
                 H...`.replace(/ +/g, ""),
                `....
                 ....
                 H...
                 ....`.replace(/ +/g, ""),
            ]);
        });

        test("move tail on corners", () => {
            const input = `R 1
                           U 2`.replace(/\n +/g, "\n");
            expect(solver.move(input).map(m => visualizer.visualize(m))).toEqual([
                `....
                 ....
                 H...
                 ....`.replace(/ +/g, ""),
                `....
                 ....
                 TH..
                 ....`.replace(/ +/g, ""),
                `....
                 .H..
                 T...
                 ....`.replace(/ +/g, ""),
                `.H..
                 .T..
                 s...
                 ....`.replace(/ +/g, ""),
            ]);
        });

        test("move tail on corners with get back", () => {
            const input = `R 1
                           U 1
                           L 1`.replace(/\n +/g, "\n");
            expect(solver.move(input).map(m => visualizer.visualize(m))).toEqual([
                `....
                 ....
                 H...
                 ....`.replace(/ +/g, ""),
                `....
                 ....
                 TH..
                 ....`.replace(/ +/g, ""),
                `....
                 .H..
                 T...
                 ....`.replace(/ +/g, ""),
                `....
                 H...
                 T...
                 ....`.replace(/ +/g, ""),
            ]);
        });

        test("move tail on two corners", () => {
            const input = `R 1
                           U 1
                           R 1`.replace(/\n +/g, "\n");
            expect(solver.move(input).map(m => visualizer.visualize(m))).toEqual([
                `....
                 ....
                 H...
                 ....`.replace(/ +/g, ""),
                `....
                 ....
                 TH..
                 ....`.replace(/ +/g, ""),
                `....
                 .H..
                 T...
                 ....`.replace(/ +/g, ""),
                `....
                 .TH.
                 s...
                 ....`.replace(/ +/g, ""),
            ]);
        });

        test("count distinct moves", () => {
            const input = `R 4
                           U 4
                           L 3
                           D 1
                           R 4
                           D 1
                           L 5
                           R 2`.replace(/\n +/g, "\n");
            expect(solver.countDistinctTailMoves(input)).toEqual(13);
        });
    });

    describe("part 2", () => {
        beforeEach(() => {
            solver = new Day9Solution(10);
            visualizer = new Visualizer({ x: 6, y: 5 }, { x: 0, y: 0 });
        });

        test("track sample moves", () => {
            const input = `R 4
                           U 4
                           L 3
                           D 1
                           R 4
                           D 1
                           L 5
                           R 2`.replace(/\n +/g, "\n");
            expect(solver.move(input).map(m => visualizer.visualize(m))).toEqual([
                `......
                 ......
                 ......
                 ......
                 H.....`.replace(/ +/g, ""),
                `......
                 ......
                 ......
                 ......
                 1H....`.replace(/ +/g, ""),
                `......
                 ......
                 ......
                 ......
                 21H...`.replace(/ +/g, ""),
                `......
                 ......
                 ......
                 ......
                 321H..`.replace(/ +/g, ""),
                `......
                 ......
                 ......
                 ......
                 4321H.`.replace(/ +/g, ""),
                `......
                 ......
                 ......
                 ....H.
                 4321..`.replace(/ +/g, ""),
                `......
                 ......
                 ....H.
                 .4321.
                 5.....`.replace(/ +/g, ""),
                `......
                 ....H.
                 ....1.
                 .432..
                 5.....`.replace(/ +/g, ""),
                `....H.
                 ....1.
                 ..432.
                 .5....
                 6.....`.replace(/ +/g, ""),
                `...H..
                 ....1.
                 ..432.
                 .5....
                 6.....`.replace(/ +/g, ""),
                `..H1..
                 ...2..
                 ..43..
                 .5....
                 6.....`.replace(/ +/g, ""),
                `.H1...
                 ...2..
                 ..43..
                 .5....
                 6.....`.replace(/ +/g, ""),
                `..1...
                 .H.2..
                 ..43..
                 .5....
                 6.....`.replace(/ +/g, ""),
                `..1...
                 ..H2..
                 ..43..
                 .5....
                 6.....`.replace(/ +/g, ""),
                `..1...
                 ...H..
                 ..43..
                 .5....
                 6.....`.replace(/ +/g, ""),
                `......
                 ...1H.
                 ..43..
                 .5....
                 6.....`.replace(/ +/g, ""),
                `......
                 ...21H
                 ..43..
                 .5....
                 6.....`.replace(/ +/g, ""),
                `......
                 ...21.
                 ..43.H
                 .5....
                 6.....`.replace(/ +/g, ""),
                `......
                 ...21.
                 ..43H.
                 .5....
                 6.....`.replace(/ +/g, ""),
                `......
                 ...21.
                 ..4H..
                 .5....
                 6.....`.replace(/ +/g, ""),
                `......
                 ...2..
                 ..H1..
                 .5....
                 6.....`.replace(/ +/g, ""),
                `......
                 ...2..
                 .H13..
                 .5....
                 6.....`.replace(/ +/g, ""),
                `......
                 ......
                 H123..
                 .5....
                 6.....`.replace(/ +/g, ""),
                `......
                 ......
                 .H23..
                 .5....
                 6.....`.replace(/ +/g, ""),
                `......
                 ......
                 .1H3..
                 .5....
                 6.....`.replace(/ +/g, ""),
            ]);
        });

        test("count distinct moves", () => {
            visualizer = new Visualizer({ x: 26, y: 21 }, { x: 11, y: 5 });
            const input = `R 5
                           U 8
                           L 8
                           D 3
                           R 17
                           D 10
                           L 25
                           U 20`.replace(/\n +/g, "\n");
            expect(solver.countDistinctTailMoves(input)).toEqual(36);
        });
    });
});
