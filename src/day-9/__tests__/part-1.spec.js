import { Day9Solution } from "@/day-9/part-1";
import { beforeEach, describe, expect, test } from "@jest/globals";
import { Visualizer } from "@/day-9/visualizer";

describe("day 9", () => {
    let visualizer;

    describe("part 1", () => {
        let solver;

        beforeEach(() => {
            solver = new Day9Solution();
            visualizer = new Visualizer({ x: 4, y: 4 }, { x: 0, y: 1 });
        });

        test("track tail moves", () => {
            const input = `U 2`.replace(/\n +/g, "\n");
            expect(solver.move(input).map(m => visualizer.visualize(m))).toEqual([
                `....
                 ....
                 H...
                 ....`.replace(/ +/g, ""),
                `....
                 H...
                 T...
                 ....`.replace(/ +/g, ""),
                `H...
                 T...
                 s...
                 ....`.replace(/ +/g, ""),
            ]);
        });

        test("hide tail under head", () => {
            const input = `U 1
                           D 2
                           U 1`.replace(/\n +/g, "\n");
            expect(solver.move(input).map(m => visualizer.visualize(m))).toEqual([
                `....
                 ....
                 H...
                 ....`.replace(/ +/g, ""),
                `....
                 H...
                 T...
                 ....`.replace(/ +/g, ""),
                `....
                 ....
                 H...
                 ....`.replace(/ +/g, ""),
                `....
                 ....
                 T...
                 H...`.replace(/ +/g, ""),
                `....
                 ....
                 H...
                 ....`.replace(/ +/g, ""),
            ]);
        });

        test("move tail on corners", () => {
            const input = `R 1
                           U 2`.replace(/\n +/g, "\n");
            expect(solver.move(input).map(m => visualizer.visualize(m))).toEqual([
                `....
                 ....
                 H...
                 ....`.replace(/ +/g, ""),
                `....
                 ....
                 TH..
                 ....`.replace(/ +/g, ""),
                `....
                 .H..
                 T...
                 ....`.replace(/ +/g, ""),
                `.H..
                 .T..
                 s...
                 ....`.replace(/ +/g, ""),
            ]);
        });

        test("move tail on corners with get back", () => {
            const input = `R 1
                           U 1
                           L 1`.replace(/\n +/g, "\n");
            expect(solver.move(input).map(m => visualizer.visualize(m))).toEqual([
                `....
                 ....
                 H...
                 ....`.replace(/ +/g, ""),
                `....
                 ....
                 TH..
                 ....`.replace(/ +/g, ""),
                `....
                 .H..
                 T...
                 ....`.replace(/ +/g, ""),
                `....
                 H...
                 T...
                 ....`.replace(/ +/g, ""),
            ]);
        });

        test("move tail on two corners", () => {
            const input = `R 1
                           U 1
                           R 1`.replace(/\n +/g, "\n");
            expect(solver.move(input).map(m => visualizer.visualize(m))).toEqual([
                `....
                 ....
                 H...
                 ....`.replace(/ +/g, ""),
                `....
                 ....
                 TH..
                 ....`.replace(/ +/g, ""),
                `....
                 .H..
                 T...
                 ....`.replace(/ +/g, ""),
                `....
                 .TH.
                 s...
                 ....`.replace(/ +/g, ""),
            ]);
        });

        test("count distinct moves", () => {
            const input = `R 4
                           U 4
                           L 3
                           D 1
                           R 4
                           D 1
                           L 5
                           R 2`.replace(/\n +/g, "\n");
            expect(solver.countDistinctTailMoves(input)).toEqual(13);
        });
    });
});
